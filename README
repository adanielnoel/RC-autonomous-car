Vestion 0.2  Many improvements on the stereoCamera and Odometry classes and rethinkered odometry algorithm.
StereoCamera: added an interactive camera calibration tool and other useful functions.
	+ void calibrate(bool showResult)
	+ Mat glueTwoImagesHorizontal(Mat Img1, Mat Img2)
	+ Mat glueTwoImagesVertical(Mat Img1, Mat Img2)
Odometry: matching is now crossChecked (optional) and filtered using a RANSAC algorithm to eliminate outliers.
	+ vector<DMatch> filteredMatch(vector<KeyPoint> kpL, vector<KeyPoint> kpR, Mat& descL, Mat& descR, bool doCrossCheck)
	+ void showLRMatches()
	- Many functions an attributes have been eliminated because they belonged to the old algorithm.

-------------------------------------------------------------------
Version 0.1.2 Code is now carefully commented and there are lots of command line feedback
--------------------------------------------------------------------
Version 0.1.1 Added documentation
+ Path planning algorithm proposal
+ Odometry algorithm explanation
--------------------------------------------------------------------
Version 0.1  initial skeleton

Self Driving RC Car: The aim of this project is to develop an on-board computer vision system for an RC car to make it navigate autonomously in indoor and outdoor environments.

Classes and functions:

* StereoPair: stores stereo images and operates on them.
	- setupRectification: constructor call
	- rectifyImage: It takes an image and rectifies it with the rectification template generated by setupRectification.
	- rectificationViewer: It opens a window with the stereo images and the epipolar lines to check the rectification.
	- updateRectifiedPair: It retrieves a new stereo frame from the camera and rectifies both images.
	- updateDepthMap: It re-generates a depth map. Use it after updateRectifiedPair.
	- getMainImg: Returns the image from which the depth map is generated.
	- saveCalibrationFrames: opens a live window for each camera (unrectified) and saves frames to file when user presses 's' or 'S' keys. Usefull to use with the chessboard calibration method.

* Odometry: Tracks position and updates map
	- updateQueue: gets a new image, generates key points and descriptors and matches them with existing ones. On a future commit it will also track the camera's position on a reference coordinate system.
